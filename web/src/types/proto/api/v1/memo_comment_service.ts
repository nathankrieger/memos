// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v4.25.3
// source: api/v1/memo_comment_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Memo } from "./memo_service";

export const protobufPackage = "memos.api.v1";

export interface CreateMemoCommentRequest {
  /** The name of the memo. */
  name: string;
  /** The comment to create. */
  comment?: Memo | undefined;
}

export interface ListMemoCommentsRequest {
  /** The name of the memo. */
  name: string;
}

export interface ListMemoCommentsResponse {
  memos: Memo[];
}

function createBaseCreateMemoCommentRequest(): CreateMemoCommentRequest {
  return { name: "", comment: undefined };
}

export const CreateMemoCommentRequest: MessageFns<CreateMemoCommentRequest> = {
  encode(message: CreateMemoCommentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.comment !== undefined) {
      Memo.encode(message.comment, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMemoCommentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMemoCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.comment = Memo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMemoCommentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      comment: isSet(object.comment) ? Memo.fromJSON(object.comment) : undefined,
    };
  },

  toJSON(message: CreateMemoCommentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.comment !== undefined) {
      obj.comment = Memo.toJSON(message.comment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMemoCommentRequest>, I>>(base?: I): CreateMemoCommentRequest {
    return CreateMemoCommentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMemoCommentRequest>, I>>(object: I): CreateMemoCommentRequest {
    const message = createBaseCreateMemoCommentRequest();
    message.name = object.name ?? "";
    message.comment = (object.comment !== undefined && object.comment !== null)
      ? Memo.fromPartial(object.comment)
      : undefined;
    return message;
  },
};

function createBaseListMemoCommentsRequest(): ListMemoCommentsRequest {
  return { name: "" };
}

export const ListMemoCommentsRequest: MessageFns<ListMemoCommentsRequest> = {
  encode(message: ListMemoCommentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMemoCommentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMemoCommentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMemoCommentsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ListMemoCommentsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMemoCommentsRequest>, I>>(base?: I): ListMemoCommentsRequest {
    return ListMemoCommentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMemoCommentsRequest>, I>>(object: I): ListMemoCommentsRequest {
    const message = createBaseListMemoCommentsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListMemoCommentsResponse(): ListMemoCommentsResponse {
  return { memos: [] };
}

export const ListMemoCommentsResponse: MessageFns<ListMemoCommentsResponse> = {
  encode(message: ListMemoCommentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.memos) {
      Memo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMemoCommentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMemoCommentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.memos.push(Memo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMemoCommentsResponse {
    return { memos: globalThis.Array.isArray(object?.memos) ? object.memos.map((e: any) => Memo.fromJSON(e)) : [] };
  },

  toJSON(message: ListMemoCommentsResponse): unknown {
    const obj: any = {};
    if (message.memos?.length) {
      obj.memos = message.memos.map((e) => Memo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMemoCommentsResponse>, I>>(base?: I): ListMemoCommentsResponse {
    return ListMemoCommentsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMemoCommentsResponse>, I>>(object: I): ListMemoCommentsResponse {
    const message = createBaseListMemoCommentsResponse();
    message.memos = object.memos?.map((e) => Memo.fromPartial(e)) || [];
    return message;
  },
};

export interface MemoCommentService {
  /** CreateMemoComment creates a comment for a memo. */
  CreateMemoComment(request: CreateMemoCommentRequest): Promise<Memo>;
  /** ListMemoComments lists comments for a memo. */
  ListMemoComments(request: ListMemoCommentsRequest): Promise<ListMemoCommentsResponse>;
}

export const MemoCommentServiceServiceName = "memos.api.v1.MemoCommentService";
export class MemoCommentServiceClientImpl implements MemoCommentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MemoCommentServiceServiceName;
    this.rpc = rpc;
    this.CreateMemoComment = this.CreateMemoComment.bind(this);
    this.ListMemoComments = this.ListMemoComments.bind(this);
  }
  CreateMemoComment(request: CreateMemoCommentRequest): Promise<Memo> {
    const data = CreateMemoCommentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateMemoComment", data);
    return promise.then((data) => Memo.decode(new BinaryReader(data)));
  }

  ListMemoComments(request: ListMemoCommentsRequest): Promise<ListMemoCommentsResponse> {
    const data = ListMemoCommentsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListMemoComments", data);
    return promise.then((data) => ListMemoCommentsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
