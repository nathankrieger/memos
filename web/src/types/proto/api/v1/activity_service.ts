// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v4.25.3
// source: api/v1/activity_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "memos.api.v1";

export interface Activity {
  /**
   * The name of the activity.
   * Format: activities/{id}
   */
  name: string;
  /**
   * The name of the creator.
   * Format: users/{user}
   */
  creator: string;
  /** The type of the activity. */
  type: string;
  /** The level of the activity. */
  level: string;
  /** The create time of the activity. */
  createTime?:
    | Date
    | undefined;
  /** The payload of the activity. */
  payload?: ActivityPayload | undefined;
}

export interface ActivityPayload {
  memoComment?: ActivityMemoCommentPayload | undefined;
}

/** ActivityMemoCommentPayload represents the payload of a memo comment activity. */
export interface ActivityMemoCommentPayload {
  /**
   * The memo name of comment.
   * Refer to `Memo.name`.
   */
  memo: string;
  /** The name of related memo. */
  relatedMemo: string;
}

export interface GetActivityRequest {
  /**
   * The name of the activity.
   * Format: activities/{id}, id is the system generated auto-incremented id.
   */
  name: string;
}

function createBaseActivity(): Activity {
  return { name: "", creator: "", type: "", level: "", createTime: undefined, payload: undefined };
}

export const Activity: MessageFns<Activity> = {
  encode(message: Activity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.level !== "") {
      writer.uint32(34).string(message.level);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.payload !== undefined) {
      ActivityPayload.encode(message.payload, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Activity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.level = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.payload = ActivityPayload.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Activity {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      level: isSet(object.level) ? globalThis.String(object.level) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      payload: isSet(object.payload) ? ActivityPayload.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: Activity): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.level !== "") {
      obj.level = message.level;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.payload !== undefined) {
      obj.payload = ActivityPayload.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Activity>, I>>(base?: I): Activity {
    return Activity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Activity>, I>>(object: I): Activity {
    const message = createBaseActivity();
    message.name = object.name ?? "";
    message.creator = object.creator ?? "";
    message.type = object.type ?? "";
    message.level = object.level ?? "";
    message.createTime = object.createTime ?? undefined;
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? ActivityPayload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseActivityPayload(): ActivityPayload {
  return { memoComment: undefined };
}

export const ActivityPayload: MessageFns<ActivityPayload> = {
  encode(message: ActivityPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.memoComment !== undefined) {
      ActivityMemoCommentPayload.encode(message.memoComment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.memoComment = ActivityMemoCommentPayload.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivityPayload {
    return {
      memoComment: isSet(object.memoComment) ? ActivityMemoCommentPayload.fromJSON(object.memoComment) : undefined,
    };
  },

  toJSON(message: ActivityPayload): unknown {
    const obj: any = {};
    if (message.memoComment !== undefined) {
      obj.memoComment = ActivityMemoCommentPayload.toJSON(message.memoComment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivityPayload>, I>>(base?: I): ActivityPayload {
    return ActivityPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivityPayload>, I>>(object: I): ActivityPayload {
    const message = createBaseActivityPayload();
    message.memoComment = (object.memoComment !== undefined && object.memoComment !== null)
      ? ActivityMemoCommentPayload.fromPartial(object.memoComment)
      : undefined;
    return message;
  },
};

function createBaseActivityMemoCommentPayload(): ActivityMemoCommentPayload {
  return { memo: "", relatedMemo: "" };
}

export const ActivityMemoCommentPayload: MessageFns<ActivityMemoCommentPayload> = {
  encode(message: ActivityMemoCommentPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.memo !== "") {
      writer.uint32(10).string(message.memo);
    }
    if (message.relatedMemo !== "") {
      writer.uint32(18).string(message.relatedMemo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityMemoCommentPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityMemoCommentPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.relatedMemo = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivityMemoCommentPayload {
    return {
      memo: isSet(object.memo) ? globalThis.String(object.memo) : "",
      relatedMemo: isSet(object.relatedMemo) ? globalThis.String(object.relatedMemo) : "",
    };
  },

  toJSON(message: ActivityMemoCommentPayload): unknown {
    const obj: any = {};
    if (message.memo !== "") {
      obj.memo = message.memo;
    }
    if (message.relatedMemo !== "") {
      obj.relatedMemo = message.relatedMemo;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivityMemoCommentPayload>, I>>(base?: I): ActivityMemoCommentPayload {
    return ActivityMemoCommentPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActivityMemoCommentPayload>, I>>(object: I): ActivityMemoCommentPayload {
    const message = createBaseActivityMemoCommentPayload();
    message.memo = object.memo ?? "";
    message.relatedMemo = object.relatedMemo ?? "";
    return message;
  },
};

function createBaseGetActivityRequest(): GetActivityRequest {
  return { name: "" };
}

export const GetActivityRequest: MessageFns<GetActivityRequest> = {
  encode(message: GetActivityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActivityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActivityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetActivityRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetActivityRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetActivityRequest>, I>>(base?: I): GetActivityRequest {
    return GetActivityRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetActivityRequest>, I>>(object: I): GetActivityRequest {
    const message = createBaseGetActivityRequest();
    message.name = object.name ?? "";
    return message;
  },
};

export interface ActivityService {
  /** GetActivity returns the activity with the given id. */
  GetActivity(request: GetActivityRequest): Promise<Activity>;
}

export const ActivityServiceServiceName = "memos.api.v1.ActivityService";
export class ActivityServiceClientImpl implements ActivityService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ActivityServiceServiceName;
    this.rpc = rpc;
    this.GetActivity = this.GetActivity.bind(this);
  }
  GetActivity(request: GetActivityRequest): Promise<Activity> {
    const data = GetActivityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetActivity", data);
    return promise.then((data) => Activity.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
