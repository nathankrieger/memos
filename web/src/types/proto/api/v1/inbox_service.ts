// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v4.25.3
// source: api/v1/inbox_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../google/protobuf/empty";
import { FieldMask } from "../../google/protobuf/field_mask";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "memos.api.v1";

export interface Inbox {
  /**
   * The name of the inbox.
   * Format: inboxes/{id}, id is the system generated auto-incremented id.
   */
  name: string;
  /** Format: users/{user} */
  sender: string;
  /** Format: users/{user} */
  receiver: string;
  status: Inbox_Status;
  createTime?: Date | undefined;
  type: Inbox_Type;
  activityId?: number | undefined;
}

export enum Inbox_Status {
  STATUS_UNSPECIFIED = 0,
  UNREAD = 1,
  ARCHIVED = 2,
  UNRECOGNIZED = -1,
}

export function inbox_StatusFromJSON(object: any): Inbox_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return Inbox_Status.STATUS_UNSPECIFIED;
    case 1:
    case "UNREAD":
      return Inbox_Status.UNREAD;
    case 2:
    case "ARCHIVED":
      return Inbox_Status.ARCHIVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Inbox_Status.UNRECOGNIZED;
  }
}

export function inbox_StatusToJSON(object: Inbox_Status): string {
  switch (object) {
    case Inbox_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case Inbox_Status.UNREAD:
      return "UNREAD";
    case Inbox_Status.ARCHIVED:
      return "ARCHIVED";
    case Inbox_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Inbox_Type {
  TYPE_UNSPECIFIED = 0,
  MEMO_COMMENT = 1,
  VERSION_UPDATE = 2,
  UNRECOGNIZED = -1,
}

export function inbox_TypeFromJSON(object: any): Inbox_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Inbox_Type.TYPE_UNSPECIFIED;
    case 1:
    case "MEMO_COMMENT":
      return Inbox_Type.MEMO_COMMENT;
    case 2:
    case "VERSION_UPDATE":
      return Inbox_Type.VERSION_UPDATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Inbox_Type.UNRECOGNIZED;
  }
}

export function inbox_TypeToJSON(object: Inbox_Type): string {
  switch (object) {
    case Inbox_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Inbox_Type.MEMO_COMMENT:
      return "MEMO_COMMENT";
    case Inbox_Type.VERSION_UPDATE:
      return "VERSION_UPDATE";
    case Inbox_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ListInboxesRequest {
  /** Format: users/{user} */
  user: string;
  /** The maximum number of inbox to return. */
  pageSize: number;
  /** Provide this to retrieve the subsequent page. */
  pageToken: string;
}

export interface ListInboxesResponse {
  inboxes: Inbox[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

export interface UpdateInboxRequest {
  inbox?: Inbox | undefined;
  updateMask?: string[] | undefined;
}

export interface DeleteInboxRequest {
  /** The name of the inbox to delete. */
  name: string;
}

function createBaseInbox(): Inbox {
  return { name: "", sender: "", receiver: "", status: 0, createTime: undefined, type: 0, activityId: undefined };
}

export const Inbox: MessageFns<Inbox> = {
  encode(message: Inbox, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.receiver !== "") {
      writer.uint32(26).string(message.receiver);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    if (message.activityId !== undefined) {
      writer.uint32(56).int32(message.activityId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inbox {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInbox();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.receiver = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.activityId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inbox {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
      status: isSet(object.status) ? inbox_StatusFromJSON(object.status) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      type: isSet(object.type) ? inbox_TypeFromJSON(object.type) : 0,
      activityId: isSet(object.activityId) ? globalThis.Number(object.activityId) : undefined,
    };
  },

  toJSON(message: Inbox): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.status !== 0) {
      obj.status = inbox_StatusToJSON(message.status);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.type !== 0) {
      obj.type = inbox_TypeToJSON(message.type);
    }
    if (message.activityId !== undefined) {
      obj.activityId = Math.round(message.activityId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Inbox>, I>>(base?: I): Inbox {
    return Inbox.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Inbox>, I>>(object: I): Inbox {
    const message = createBaseInbox();
    message.name = object.name ?? "";
    message.sender = object.sender ?? "";
    message.receiver = object.receiver ?? "";
    message.status = object.status ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.type = object.type ?? 0;
    message.activityId = object.activityId ?? undefined;
    return message;
  },
};

function createBaseListInboxesRequest(): ListInboxesRequest {
  return { user: "", pageSize: 0, pageToken: "" };
}

export const ListInboxesRequest: MessageFns<ListInboxesRequest> = {
  encode(message: ListInboxesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInboxesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInboxesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInboxesRequest {
    return {
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListInboxesRequest): unknown {
    const obj: any = {};
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListInboxesRequest>, I>>(base?: I): ListInboxesRequest {
    return ListInboxesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListInboxesRequest>, I>>(object: I): ListInboxesRequest {
    const message = createBaseListInboxesRequest();
    message.user = object.user ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListInboxesResponse(): ListInboxesResponse {
  return { inboxes: [], nextPageToken: "" };
}

export const ListInboxesResponse: MessageFns<ListInboxesResponse> = {
  encode(message: ListInboxesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.inboxes) {
      Inbox.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInboxesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInboxesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inboxes.push(Inbox.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInboxesResponse {
    return {
      inboxes: globalThis.Array.isArray(object?.inboxes) ? object.inboxes.map((e: any) => Inbox.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListInboxesResponse): unknown {
    const obj: any = {};
    if (message.inboxes?.length) {
      obj.inboxes = message.inboxes.map((e) => Inbox.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListInboxesResponse>, I>>(base?: I): ListInboxesResponse {
    return ListInboxesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListInboxesResponse>, I>>(object: I): ListInboxesResponse {
    const message = createBaseListInboxesResponse();
    message.inboxes = object.inboxes?.map((e) => Inbox.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateInboxRequest(): UpdateInboxRequest {
  return { inbox: undefined, updateMask: undefined };
}

export const UpdateInboxRequest: MessageFns<UpdateInboxRequest> = {
  encode(message: UpdateInboxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inbox !== undefined) {
      Inbox.encode(message.inbox, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInboxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInboxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inbox = Inbox.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInboxRequest {
    return {
      inbox: isSet(object.inbox) ? Inbox.fromJSON(object.inbox) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateInboxRequest): unknown {
    const obj: any = {};
    if (message.inbox !== undefined) {
      obj.inbox = Inbox.toJSON(message.inbox);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateInboxRequest>, I>>(base?: I): UpdateInboxRequest {
    return UpdateInboxRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateInboxRequest>, I>>(object: I): UpdateInboxRequest {
    const message = createBaseUpdateInboxRequest();
    message.inbox = (object.inbox !== undefined && object.inbox !== null) ? Inbox.fromPartial(object.inbox) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteInboxRequest(): DeleteInboxRequest {
  return { name: "" };
}

export const DeleteInboxRequest: MessageFns<DeleteInboxRequest> = {
  encode(message: DeleteInboxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteInboxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteInboxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteInboxRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteInboxRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteInboxRequest>, I>>(base?: I): DeleteInboxRequest {
    return DeleteInboxRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteInboxRequest>, I>>(object: I): DeleteInboxRequest {
    const message = createBaseDeleteInboxRequest();
    message.name = object.name ?? "";
    return message;
  },
};

export interface InboxService {
  /** ListInboxes lists inboxes for a user. */
  ListInboxes(request: ListInboxesRequest): Promise<ListInboxesResponse>;
  /** UpdateInbox updates an inbox. */
  UpdateInbox(request: UpdateInboxRequest): Promise<Inbox>;
  /** DeleteInbox deletes an inbox. */
  DeleteInbox(request: DeleteInboxRequest): Promise<Empty>;
}

export const InboxServiceServiceName = "memos.api.v1.InboxService";
export class InboxServiceClientImpl implements InboxService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || InboxServiceServiceName;
    this.rpc = rpc;
    this.ListInboxes = this.ListInboxes.bind(this);
    this.UpdateInbox = this.UpdateInbox.bind(this);
    this.DeleteInbox = this.DeleteInbox.bind(this);
  }
  ListInboxes(request: ListInboxesRequest): Promise<ListInboxesResponse> {
    const data = ListInboxesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListInboxes", data);
    return promise.then((data) => ListInboxesResponse.decode(new BinaryReader(data)));
  }

  UpdateInbox(request: UpdateInboxRequest): Promise<Inbox> {
    const data = UpdateInboxRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateInbox", data);
    return promise.then((data) => Inbox.decode(new BinaryReader(data)));
  }

  DeleteInbox(request: DeleteInboxRequest): Promise<Empty> {
    const data = DeleteInboxRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteInbox", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
